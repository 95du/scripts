{
    "always_run_in_app": false,
    "icon": {
        "color": "pink",
        "glyph": "cloud-download-alt"
    },
    "name": "95du_ScriptStore",
    "script": "/**\n * 组件名称: 95du_ScriptStore\n * 组件作者: 95du茅台\n * 组件版本: Version 1.0.0\n * 发布日期: 2023-07-07\n */\n\nconst scriptName = '95du_store';\nconst scriptUrl = atob('aHR0cHM6Ly9naXRjb2RlLm5ldC80cWlhby9zY3JpcHRhYmxlLy0vcmF3L21hc3Rlci92aXAvbWFpbjk1ZHVTdG9yZS5qcw==');\n\nconst fm = FileManager.local();\nconst runPath = fm.joinPath(fm.documentsDirectory(), scriptName);\nconst moduleDir = fm.joinPath(runPath, 'Running');\n\nif (!fm.fileExists(runPath)) fm.createDirectory(runPath);\nif (!fm.fileExists(moduleDir)) fm.createDirectory(moduleDir);\n\nconst downloadModule = async () => {\n  const date = new Date();\n  const df = new DateFormatter();\n  df.dateFormat = 'yyyyMMddHH';\n  \n  const moduleFilename = df.string(date).toString() + '.js';\n  const modulePath = fm.joinPath(moduleDir, moduleFilename);\n\n  if (fm.fileExists(modulePath)) return modulePath;\n\n  const [moduleFiles, moduleLatestFile] = getModuleVersions();\n\n  try {\n    const req = new Request(scriptUrl);\n    const moduleJs = await req.load();\n    if (moduleJs) {\n      fm.write(modulePath, moduleJs);\n      if (moduleFiles) moduleFiles.forEach(file => fm.remove(fm.joinPath(moduleDir, file)));\n      return modulePath;\n    } else {\n      return moduleLatestFile ? fm.joinPath(moduleDir, moduleLatestFile) : null;\n    }\n  } catch (e) {\n    return moduleLatestFile ? fm.joinPath(moduleDir, moduleLatestFile) : null;\n  }\n};\n\nconst getModuleVersions = () => {\n  const dirContents = fm.listContents(moduleDir);\n  if (dirContents.length > 0) {\n    const versions = dirContents.map(x => parseInt(x.replace('.js', '')));\n    versions.sort((a, b) => b - a);\n\n    if (versions.length > 0) {\n      const moduleFiles = versions.map(x => `${x}.js`);\n      const moduleLatestFile = `${versions[0]}.js`;\n      return [moduleFiles, moduleLatestFile];\n    }\n  }\n  return [null, null];\n};\n\nconst modulePath = await downloadModule();\nif (modulePath) {\n  const importedModule = await importModule(modulePath);\n  importedModule.main();\n};",
    "share_sheet_inputs": []
}